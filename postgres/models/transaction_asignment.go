// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TransactionAsignment is an object representing the database table.
type TransactionAsignment struct {
	ID            int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	AgentID       int    `boil:"agent_id" json:"agent_id" toml:"agent_id" yaml:"agent_id"`
	TransactionID string `boil:"transaction_id" json:"transaction_id" toml:"transaction_id" yaml:"transaction_id"`
	Amount        int64  `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	Date          int64  `boil:"date" json:"date" toml:"date" yaml:"date"`
	Status        int    `boil:"status" json:"status" toml:"status" yaml:"status"`

	R *transactionAsignmentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L transactionAsignmentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TransactionAsignmentColumns = struct {
	ID            string
	AgentID       string
	TransactionID string
	Amount        string
	Date          string
	Status        string
}{
	ID:            "id",
	AgentID:       "agent_id",
	TransactionID: "transaction_id",
	Amount:        "amount",
	Date:          "date",
	Status:        "status",
}

var TransactionAsignmentTableColumns = struct {
	ID            string
	AgentID       string
	TransactionID string
	Amount        string
	Date          string
	Status        string
}{
	ID:            "transaction_asignment.id",
	AgentID:       "transaction_asignment.agent_id",
	TransactionID: "transaction_asignment.transaction_id",
	Amount:        "transaction_asignment.amount",
	Date:          "transaction_asignment.date",
	Status:        "transaction_asignment.status",
}

// Generated where

var TransactionAsignmentWhere = struct {
	ID            whereHelperint
	AgentID       whereHelperint
	TransactionID whereHelperstring
	Amount        whereHelperint64
	Date          whereHelperint64
	Status        whereHelperint
}{
	ID:            whereHelperint{field: "\"transaction_asignment\".\"id\""},
	AgentID:       whereHelperint{field: "\"transaction_asignment\".\"agent_id\""},
	TransactionID: whereHelperstring{field: "\"transaction_asignment\".\"transaction_id\""},
	Amount:        whereHelperint64{field: "\"transaction_asignment\".\"amount\""},
	Date:          whereHelperint64{field: "\"transaction_asignment\".\"date\""},
	Status:        whereHelperint{field: "\"transaction_asignment\".\"status\""},
}

// TransactionAsignmentRels is where relationship names are stored.
var TransactionAsignmentRels = struct {
	Agent       string
	Transaction string
}{
	Agent:       "Agent",
	Transaction: "Transaction",
}

// transactionAsignmentR is where relationships are stored.
type transactionAsignmentR struct {
	Agent       *Agent       `boil:"Agent" json:"Agent" toml:"Agent" yaml:"Agent"`
	Transaction *Transaction `boil:"Transaction" json:"Transaction" toml:"Transaction" yaml:"Transaction"`
}

// NewStruct creates a new relationship struct
func (*transactionAsignmentR) NewStruct() *transactionAsignmentR {
	return &transactionAsignmentR{}
}

// transactionAsignmentL is where Load methods for each relationship are stored.
type transactionAsignmentL struct{}

var (
	transactionAsignmentAllColumns            = []string{"id", "agent_id", "transaction_id", "amount", "date", "status"}
	transactionAsignmentColumnsWithoutDefault = []string{"agent_id", "transaction_id", "amount", "date", "status"}
	transactionAsignmentColumnsWithDefault    = []string{"id"}
	transactionAsignmentPrimaryKeyColumns     = []string{"id"}
)

type (
	// TransactionAsignmentSlice is an alias for a slice of pointers to TransactionAsignment.
	// This should almost always be used instead of []TransactionAsignment.
	TransactionAsignmentSlice []*TransactionAsignment

	transactionAsignmentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	transactionAsignmentType                 = reflect.TypeOf(&TransactionAsignment{})
	transactionAsignmentMapping              = queries.MakeStructMapping(transactionAsignmentType)
	transactionAsignmentPrimaryKeyMapping, _ = queries.BindMapping(transactionAsignmentType, transactionAsignmentMapping, transactionAsignmentPrimaryKeyColumns)
	transactionAsignmentInsertCacheMut       sync.RWMutex
	transactionAsignmentInsertCache          = make(map[string]insertCache)
	transactionAsignmentUpdateCacheMut       sync.RWMutex
	transactionAsignmentUpdateCache          = make(map[string]updateCache)
	transactionAsignmentUpsertCacheMut       sync.RWMutex
	transactionAsignmentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single transactionAsignment record from the query.
func (q transactionAsignmentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TransactionAsignment, error) {
	o := &TransactionAsignment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for transaction_asignment")
	}

	return o, nil
}

// All returns all TransactionAsignment records from the query.
func (q transactionAsignmentQuery) All(ctx context.Context, exec boil.ContextExecutor) (TransactionAsignmentSlice, error) {
	var o []*TransactionAsignment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TransactionAsignment slice")
	}

	return o, nil
}

// Count returns the count of all TransactionAsignment records in the query.
func (q transactionAsignmentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count transaction_asignment rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q transactionAsignmentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if transaction_asignment exists")
	}

	return count > 0, nil
}

// Agent pointed to by the foreign key.
func (o *TransactionAsignment) Agent(mods ...qm.QueryMod) agentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AgentID),
	}

	queryMods = append(queryMods, mods...)

	query := Agents(queryMods...)
	queries.SetFrom(query.Query, "\"agent\"")

	return query
}

// Transaction pointed to by the foreign key.
func (o *TransactionAsignment) Transaction(mods ...qm.QueryMod) transactionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TransactionID),
	}

	queryMods = append(queryMods, mods...)

	query := Transactions(queryMods...)
	queries.SetFrom(query.Query, "\"transaction\"")

	return query
}

// LoadAgent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionAsignmentL) LoadAgent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTransactionAsignment interface{}, mods queries.Applicator) error {
	var slice []*TransactionAsignment
	var object *TransactionAsignment

	if singular {
		object = maybeTransactionAsignment.(*TransactionAsignment)
	} else {
		slice = *maybeTransactionAsignment.(*[]*TransactionAsignment)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transactionAsignmentR{}
		}
		args = append(args, object.AgentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionAsignmentR{}
			}

			for _, a := range args {
				if a == obj.AgentID {
					continue Outer
				}
			}

			args = append(args, obj.AgentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`agent`),
		qm.WhereIn(`agent.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Agent")
	}

	var resultSlice []*Agent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Agent")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for agent")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for agent")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Agent = foreign
		if foreign.R == nil {
			foreign.R = &agentR{}
		}
		foreign.R.TransactionAsignments = append(foreign.R.TransactionAsignments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AgentID == foreign.ID {
				local.R.Agent = foreign
				if foreign.R == nil {
					foreign.R = &agentR{}
				}
				foreign.R.TransactionAsignments = append(foreign.R.TransactionAsignments, local)
				break
			}
		}
	}

	return nil
}

// LoadTransaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionAsignmentL) LoadTransaction(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTransactionAsignment interface{}, mods queries.Applicator) error {
	var slice []*TransactionAsignment
	var object *TransactionAsignment

	if singular {
		object = maybeTransactionAsignment.(*TransactionAsignment)
	} else {
		slice = *maybeTransactionAsignment.(*[]*TransactionAsignment)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transactionAsignmentR{}
		}
		args = append(args, object.TransactionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionAsignmentR{}
			}

			for _, a := range args {
				if a == obj.TransactionID {
					continue Outer
				}
			}

			args = append(args, obj.TransactionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`transaction`),
		qm.WhereIn(`transaction.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Transaction")
	}

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Transaction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for transaction")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transaction")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Transaction = foreign
		if foreign.R == nil {
			foreign.R = &transactionR{}
		}
		foreign.R.TransactionAsignments = append(foreign.R.TransactionAsignments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TransactionID == foreign.ID {
				local.R.Transaction = foreign
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.TransactionAsignments = append(foreign.R.TransactionAsignments, local)
				break
			}
		}
	}

	return nil
}

// SetAgent of the transactionAsignment to the related item.
// Sets o.R.Agent to related.
// Adds o to related.R.TransactionAsignments.
func (o *TransactionAsignment) SetAgent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Agent) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transaction_asignment\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"agent_id"}),
		strmangle.WhereClause("\"", "\"", 2, transactionAsignmentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AgentID = related.ID
	if o.R == nil {
		o.R = &transactionAsignmentR{
			Agent: related,
		}
	} else {
		o.R.Agent = related
	}

	if related.R == nil {
		related.R = &agentR{
			TransactionAsignments: TransactionAsignmentSlice{o},
		}
	} else {
		related.R.TransactionAsignments = append(related.R.TransactionAsignments, o)
	}

	return nil
}

// SetTransaction of the transactionAsignment to the related item.
// Sets o.R.Transaction to related.
// Adds o to related.R.TransactionAsignments.
func (o *TransactionAsignment) SetTransaction(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Transaction) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transaction_asignment\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"transaction_id"}),
		strmangle.WhereClause("\"", "\"", 2, transactionAsignmentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TransactionID = related.ID
	if o.R == nil {
		o.R = &transactionAsignmentR{
			Transaction: related,
		}
	} else {
		o.R.Transaction = related
	}

	if related.R == nil {
		related.R = &transactionR{
			TransactionAsignments: TransactionAsignmentSlice{o},
		}
	} else {
		related.R.TransactionAsignments = append(related.R.TransactionAsignments, o)
	}

	return nil
}

// TransactionAsignments retrieves all the records using an executor.
func TransactionAsignments(mods ...qm.QueryMod) transactionAsignmentQuery {
	mods = append(mods, qm.From("\"transaction_asignment\""))
	return transactionAsignmentQuery{NewQuery(mods...)}
}

// FindTransactionAsignment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTransactionAsignment(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*TransactionAsignment, error) {
	transactionAsignmentObj := &TransactionAsignment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"transaction_asignment\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, transactionAsignmentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from transaction_asignment")
	}

	return transactionAsignmentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TransactionAsignment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no transaction_asignment provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(transactionAsignmentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	transactionAsignmentInsertCacheMut.RLock()
	cache, cached := transactionAsignmentInsertCache[key]
	transactionAsignmentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			transactionAsignmentAllColumns,
			transactionAsignmentColumnsWithDefault,
			transactionAsignmentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(transactionAsignmentType, transactionAsignmentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(transactionAsignmentType, transactionAsignmentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"transaction_asignment\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"transaction_asignment\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into transaction_asignment")
	}

	if !cached {
		transactionAsignmentInsertCacheMut.Lock()
		transactionAsignmentInsertCache[key] = cache
		transactionAsignmentInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the TransactionAsignment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TransactionAsignment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	transactionAsignmentUpdateCacheMut.RLock()
	cache, cached := transactionAsignmentUpdateCache[key]
	transactionAsignmentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			transactionAsignmentAllColumns,
			transactionAsignmentPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update transaction_asignment, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"transaction_asignment\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, transactionAsignmentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(transactionAsignmentType, transactionAsignmentMapping, append(wl, transactionAsignmentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update transaction_asignment row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for transaction_asignment")
	}

	if !cached {
		transactionAsignmentUpdateCacheMut.Lock()
		transactionAsignmentUpdateCache[key] = cache
		transactionAsignmentUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q transactionAsignmentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for transaction_asignment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for transaction_asignment")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TransactionAsignmentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionAsignmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"transaction_asignment\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, transactionAsignmentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in transactionAsignment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all transactionAsignment")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TransactionAsignment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no transaction_asignment provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(transactionAsignmentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	transactionAsignmentUpsertCacheMut.RLock()
	cache, cached := transactionAsignmentUpsertCache[key]
	transactionAsignmentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			transactionAsignmentAllColumns,
			transactionAsignmentColumnsWithDefault,
			transactionAsignmentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			transactionAsignmentAllColumns,
			transactionAsignmentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert transaction_asignment, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(transactionAsignmentPrimaryKeyColumns))
			copy(conflict, transactionAsignmentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"transaction_asignment\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(transactionAsignmentType, transactionAsignmentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(transactionAsignmentType, transactionAsignmentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert transaction_asignment")
	}

	if !cached {
		transactionAsignmentUpsertCacheMut.Lock()
		transactionAsignmentUpsertCache[key] = cache
		transactionAsignmentUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single TransactionAsignment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TransactionAsignment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TransactionAsignment provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), transactionAsignmentPrimaryKeyMapping)
	sql := "DELETE FROM \"transaction_asignment\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from transaction_asignment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for transaction_asignment")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q transactionAsignmentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no transactionAsignmentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from transaction_asignment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for transaction_asignment")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TransactionAsignmentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionAsignmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"transaction_asignment\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, transactionAsignmentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from transactionAsignment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for transaction_asignment")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TransactionAsignment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTransactionAsignment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransactionAsignmentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TransactionAsignmentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionAsignmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"transaction_asignment\".* FROM \"transaction_asignment\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, transactionAsignmentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TransactionAsignmentSlice")
	}

	*o = slice

	return nil
}

// TransactionAsignmentExists checks if the TransactionAsignment row exists.
func TransactionAsignmentExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"transaction_asignment\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if transaction_asignment exists")
	}

	return exists, nil
}
