// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Accounts", testAccounts)
	t.Run("AccountTransactions", testAccountTransactions)
	t.Run("LoginInfos", testLoginInfos)
	t.Run("Notifications", testNotifications)
	t.Run("SecurityCodes", testSecurityCodes)
	t.Run("UserSettings", testUserSettings)
}

func TestDelete(t *testing.T) {
	t.Run("Accounts", testAccountsDelete)
	t.Run("AccountTransactions", testAccountTransactionsDelete)
	t.Run("LoginInfos", testLoginInfosDelete)
	t.Run("Notifications", testNotificationsDelete)
	t.Run("SecurityCodes", testSecurityCodesDelete)
	t.Run("UserSettings", testUserSettingsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Accounts", testAccountsQueryDeleteAll)
	t.Run("AccountTransactions", testAccountTransactionsQueryDeleteAll)
	t.Run("LoginInfos", testLoginInfosQueryDeleteAll)
	t.Run("Notifications", testNotificationsQueryDeleteAll)
	t.Run("SecurityCodes", testSecurityCodesQueryDeleteAll)
	t.Run("UserSettings", testUserSettingsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Accounts", testAccountsSliceDeleteAll)
	t.Run("AccountTransactions", testAccountTransactionsSliceDeleteAll)
	t.Run("LoginInfos", testLoginInfosSliceDeleteAll)
	t.Run("Notifications", testNotificationsSliceDeleteAll)
	t.Run("SecurityCodes", testSecurityCodesSliceDeleteAll)
	t.Run("UserSettings", testUserSettingsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Accounts", testAccountsExists)
	t.Run("AccountTransactions", testAccountTransactionsExists)
	t.Run("LoginInfos", testLoginInfosExists)
	t.Run("Notifications", testNotificationsExists)
	t.Run("SecurityCodes", testSecurityCodesExists)
	t.Run("UserSettings", testUserSettingsExists)
}

func TestFind(t *testing.T) {
	t.Run("Accounts", testAccountsFind)
	t.Run("AccountTransactions", testAccountTransactionsFind)
	t.Run("LoginInfos", testLoginInfosFind)
	t.Run("Notifications", testNotificationsFind)
	t.Run("SecurityCodes", testSecurityCodesFind)
	t.Run("UserSettings", testUserSettingsFind)
}

func TestBind(t *testing.T) {
	t.Run("Accounts", testAccountsBind)
	t.Run("AccountTransactions", testAccountTransactionsBind)
	t.Run("LoginInfos", testLoginInfosBind)
	t.Run("Notifications", testNotificationsBind)
	t.Run("SecurityCodes", testSecurityCodesBind)
	t.Run("UserSettings", testUserSettingsBind)
}

func TestOne(t *testing.T) {
	t.Run("Accounts", testAccountsOne)
	t.Run("AccountTransactions", testAccountTransactionsOne)
	t.Run("LoginInfos", testLoginInfosOne)
	t.Run("Notifications", testNotificationsOne)
	t.Run("SecurityCodes", testSecurityCodesOne)
	t.Run("UserSettings", testUserSettingsOne)
}

func TestAll(t *testing.T) {
	t.Run("Accounts", testAccountsAll)
	t.Run("AccountTransactions", testAccountTransactionsAll)
	t.Run("LoginInfos", testLoginInfosAll)
	t.Run("Notifications", testNotificationsAll)
	t.Run("SecurityCodes", testSecurityCodesAll)
	t.Run("UserSettings", testUserSettingsAll)
}

func TestCount(t *testing.T) {
	t.Run("Accounts", testAccountsCount)
	t.Run("AccountTransactions", testAccountTransactionsCount)
	t.Run("LoginInfos", testLoginInfosCount)
	t.Run("Notifications", testNotificationsCount)
	t.Run("SecurityCodes", testSecurityCodesCount)
	t.Run("UserSettings", testUserSettingsCount)
}

func TestInsert(t *testing.T) {
	t.Run("Accounts", testAccountsInsert)
	t.Run("Accounts", testAccountsInsertWhitelist)
	t.Run("AccountTransactions", testAccountTransactionsInsert)
	t.Run("AccountTransactions", testAccountTransactionsInsertWhitelist)
	t.Run("LoginInfos", testLoginInfosInsert)
	t.Run("LoginInfos", testLoginInfosInsertWhitelist)
	t.Run("Notifications", testNotificationsInsert)
	t.Run("Notifications", testNotificationsInsertWhitelist)
	t.Run("SecurityCodes", testSecurityCodesInsert)
	t.Run("SecurityCodes", testSecurityCodesInsertWhitelist)
	t.Run("UserSettings", testUserSettingsInsert)
	t.Run("UserSettings", testUserSettingsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("AccountTransactionToAccountUsingAccount", testAccountTransactionToOneAccountUsingAccount)
	t.Run("LoginInfoToAccountUsingAccount", testLoginInfoToOneAccountUsingAccount)
	t.Run("NotificationToAccountUsingAccount", testNotificationToOneAccountUsingAccount)
	t.Run("SecurityCodeToAccountUsingAccount", testSecurityCodeToOneAccountUsingAccount)
	t.Run("UserSettingToAccountUsingAccount", testUserSettingToOneAccountUsingAccount)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("AccountToAccountTransactions", testAccountToManyAccountTransactions)
	t.Run("AccountToLoginInfos", testAccountToManyLoginInfos)
	t.Run("AccountToNotifications", testAccountToManyNotifications)
	t.Run("AccountToSecurityCodes", testAccountToManySecurityCodes)
	t.Run("AccountToUserSettings", testAccountToManyUserSettings)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("AccountTransactionToAccountUsingAccountTransactions", testAccountTransactionToOneSetOpAccountUsingAccount)
	t.Run("LoginInfoToAccountUsingLoginInfos", testLoginInfoToOneSetOpAccountUsingAccount)
	t.Run("NotificationToAccountUsingNotifications", testNotificationToOneSetOpAccountUsingAccount)
	t.Run("SecurityCodeToAccountUsingSecurityCodes", testSecurityCodeToOneSetOpAccountUsingAccount)
	t.Run("UserSettingToAccountUsingUserSettings", testUserSettingToOneSetOpAccountUsingAccount)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("AccountToAccountTransactions", testAccountToManyAddOpAccountTransactions)
	t.Run("AccountToLoginInfos", testAccountToManyAddOpLoginInfos)
	t.Run("AccountToNotifications", testAccountToManyAddOpNotifications)
	t.Run("AccountToSecurityCodes", testAccountToManyAddOpSecurityCodes)
	t.Run("AccountToUserSettings", testAccountToManyAddOpUserSettings)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Accounts", testAccountsReload)
	t.Run("AccountTransactions", testAccountTransactionsReload)
	t.Run("LoginInfos", testLoginInfosReload)
	t.Run("Notifications", testNotificationsReload)
	t.Run("SecurityCodes", testSecurityCodesReload)
	t.Run("UserSettings", testUserSettingsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Accounts", testAccountsReloadAll)
	t.Run("AccountTransactions", testAccountTransactionsReloadAll)
	t.Run("LoginInfos", testLoginInfosReloadAll)
	t.Run("Notifications", testNotificationsReloadAll)
	t.Run("SecurityCodes", testSecurityCodesReloadAll)
	t.Run("UserSettings", testUserSettingsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Accounts", testAccountsSelect)
	t.Run("AccountTransactions", testAccountTransactionsSelect)
	t.Run("LoginInfos", testLoginInfosSelect)
	t.Run("Notifications", testNotificationsSelect)
	t.Run("SecurityCodes", testSecurityCodesSelect)
	t.Run("UserSettings", testUserSettingsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Accounts", testAccountsUpdate)
	t.Run("AccountTransactions", testAccountTransactionsUpdate)
	t.Run("LoginInfos", testLoginInfosUpdate)
	t.Run("Notifications", testNotificationsUpdate)
	t.Run("SecurityCodes", testSecurityCodesUpdate)
	t.Run("UserSettings", testUserSettingsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Accounts", testAccountsSliceUpdateAll)
	t.Run("AccountTransactions", testAccountTransactionsSliceUpdateAll)
	t.Run("LoginInfos", testLoginInfosSliceUpdateAll)
	t.Run("Notifications", testNotificationsSliceUpdateAll)
	t.Run("SecurityCodes", testSecurityCodesSliceUpdateAll)
	t.Run("UserSettings", testUserSettingsSliceUpdateAll)
}
